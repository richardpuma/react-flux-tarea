{"ast":null,"code":"import { EventEmitter } from \"events\";\nimport Dispatcher from \"../appDispatcher\";\nimport actionTypes from \"../actions/actionTypes\";\nconst CHANGE_EVENT = \"change\";\nlet _courses = [];\nlet _professors = [];\n\nclass CourseStore extends EventEmitter {\n  addChangeListener(callback) {\n    this.on(CHANGE_EVENT, callback);\n  }\n\n  removeChangeListener(callback) {\n    this.removeListener(CHANGE_EVENT, callback);\n  }\n\n  emitChange() {\n    this.emit(CHANGE_EVENT);\n  }\n\n  getCourses() {\n    return _courses;\n  }\n\n  getProfessors() {\n    return _professors;\n  }\n\n  getCourseBySlug(slug) {\n    return _courses.find(course => course.slug === slug);\n  }\n\n}\n\nconst store = new CourseStore();\nDispatcher.register(action => {\n  switch (action.actionType) {\n    case actionTypes.DELETE_COURSE:\n      //debugger;\n      _courses = _courses.filter(course => course.id !== parseInt(action.id, 10));\n      store.emitChange();\n      break;\n\n    case actionTypes.CREATE_COURSE:\n      _courses.push(action.course);\n\n      store.emitChange();\n      break;\n\n    case actionTypes.UPDATE_COURSE:\n      _courses = _courses.map(course => course.id === action.course.id ? action.course : course);\n      store.emitChange();\n      break;\n\n    case actionTypes.LOAD_COURSES:\n      debugger;\n      _courses = action.courses;\n      store.emitChange();\n      break;\n\n    case actionTypes.LOAD_PROFESSORS:\n      _professors = action.professors;\n      store.emitChange();\n      break;\n\n    default: // nothing to do here\n\n  }\n});\nexport default store;","map":{"version":3,"sources":["C:\\Users\\SubGerenteInform\\Desktop\\maestriaII\\Nueva carpeta\\react-flux\\src\\stores\\courseStore.js"],"names":["EventEmitter","Dispatcher","actionTypes","CHANGE_EVENT","_courses","_professors","CourseStore","addChangeListener","callback","on","removeChangeListener","removeListener","emitChange","emit","getCourses","getProfessors","getCourseBySlug","slug","find","course","store","register","action","actionType","DELETE_COURSE","filter","id","parseInt","CREATE_COURSE","push","UPDATE_COURSE","map","LOAD_COURSES","courses","LOAD_PROFESSORS","professors"],"mappings":"AAAA,SAASA,YAAT,QAA6B,QAA7B;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AAEA,MAAMC,YAAY,GAAG,QAArB;AACA,IAAIC,QAAQ,GAAG,EAAf;AACA,IAAIC,WAAW,GAAG,EAAlB;;AAEA,MAAMC,WAAN,SAA0BN,YAA1B,CAAuC;AACrCO,EAAAA,iBAAiB,CAACC,QAAD,EAAW;AAC1B,SAAKC,EAAL,CAAQN,YAAR,EAAsBK,QAAtB;AACD;;AAEDE,EAAAA,oBAAoB,CAACF,QAAD,EAAW;AAC7B,SAAKG,cAAL,CAAoBR,YAApB,EAAkCK,QAAlC;AACD;;AAEDI,EAAAA,UAAU,GAAG;AACX,SAAKC,IAAL,CAAUV,YAAV;AACD;;AAEDW,EAAAA,UAAU,GAAG;AACX,WAAOV,QAAP;AACD;;AAEDW,EAAAA,aAAa,GAAE;AACb,WAAOV,WAAP;AACD;;AAEDW,EAAAA,eAAe,CAACC,IAAD,EAAO;AACpB,WAAOb,QAAQ,CAACc,IAAT,CAAcC,MAAM,IAAIA,MAAM,CAACF,IAAP,KAAgBA,IAAxC,CAAP;AACD;;AAvBoC;;AA0BvC,MAAMG,KAAK,GAAG,IAAId,WAAJ,EAAd;AAEAL,UAAU,CAACoB,QAAX,CAAoBC,MAAM,IAAI;AAC5B,UAAQA,MAAM,CAACC,UAAf;AACE,SAAKrB,WAAW,CAACsB,aAAjB;AACE;AACApB,MAAAA,QAAQ,GAAGA,QAAQ,CAACqB,MAAT,CACTN,MAAM,IAAIA,MAAM,CAACO,EAAP,KAAcC,QAAQ,CAACL,MAAM,CAACI,EAAR,EAAY,EAAZ,CADvB,CAAX;AAGAN,MAAAA,KAAK,CAACR,UAAN;AACA;;AACF,SAAKV,WAAW,CAAC0B,aAAjB;AACExB,MAAAA,QAAQ,CAACyB,IAAT,CAAcP,MAAM,CAACH,MAArB;;AACAC,MAAAA,KAAK,CAACR,UAAN;AACA;;AACF,SAAKV,WAAW,CAAC4B,aAAjB;AACE1B,MAAAA,QAAQ,GAAGA,QAAQ,CAAC2B,GAAT,CAAaZ,MAAM,IAC5BA,MAAM,CAACO,EAAP,KAAcJ,MAAM,CAACH,MAAP,CAAcO,EAA5B,GAAiCJ,MAAM,CAACH,MAAxC,GAAiDA,MADxC,CAAX;AAGAC,MAAAA,KAAK,CAACR,UAAN;AACA;;AACF,SAAKV,WAAW,CAAC8B,YAAjB;AACI;AACF5B,MAAAA,QAAQ,GAAGkB,MAAM,CAACW,OAAlB;AACAb,MAAAA,KAAK,CAACR,UAAN;AACA;;AACF,SAAKV,WAAW,CAACgC,eAAjB;AACE7B,MAAAA,WAAW,GAAGiB,MAAM,CAACa,UAArB;AACAf,MAAAA,KAAK,CAACR,UAAN;AACA;;AACF,YA3BF,CA4BE;;AA5BF;AA8BD,CA/BD;AAiCA,eAAeQ,KAAf","sourcesContent":["import { EventEmitter } from \"events\";\r\nimport Dispatcher from \"../appDispatcher\";\r\nimport actionTypes from \"../actions/actionTypes\";\r\n\r\nconst CHANGE_EVENT = \"change\";\r\nlet _courses = [];\r\nlet _professors = [];\r\n\r\nclass CourseStore extends EventEmitter {\r\n  addChangeListener(callback) {\r\n    this.on(CHANGE_EVENT, callback);\r\n  }\r\n\r\n  removeChangeListener(callback) {\r\n    this.removeListener(CHANGE_EVENT, callback);\r\n  }\r\n\r\n  emitChange() {\r\n    this.emit(CHANGE_EVENT);\r\n  }\r\n\r\n  getCourses() {\r\n    return _courses;\r\n  }\r\n\r\n  getProfessors(){\r\n    return _professors;\r\n  }\r\n\r\n  getCourseBySlug(slug) {\r\n    return _courses.find(course => course.slug === slug);\r\n  }\r\n}\r\n\r\nconst store = new CourseStore();\r\n\r\nDispatcher.register(action => {\r\n  switch (action.actionType) {\r\n    case actionTypes.DELETE_COURSE:\r\n      //debugger;\r\n      _courses = _courses.filter(\r\n        course => course.id !== parseInt(action.id, 10)\r\n      );\r\n      store.emitChange();\r\n      break;\r\n    case actionTypes.CREATE_COURSE:\r\n      _courses.push(action.course);\r\n      store.emitChange();\r\n      break;\r\n    case actionTypes.UPDATE_COURSE:\r\n      _courses = _courses.map(course =>\r\n        course.id === action.course.id ? action.course : course\r\n      );\r\n      store.emitChange();\r\n      break;\r\n    case actionTypes.LOAD_COURSES:\r\n        debugger;\r\n      _courses = action.courses;\r\n      store.emitChange();\r\n      break;\r\n    case actionTypes.LOAD_PROFESSORS:\r\n      _professors = action.professors;\r\n      store.emitChange();\r\n      break;\r\n    default:\r\n    // nothing to do here\r\n  }\r\n});\r\n\r\nexport default store;"]},"metadata":{},"sourceType":"module"}