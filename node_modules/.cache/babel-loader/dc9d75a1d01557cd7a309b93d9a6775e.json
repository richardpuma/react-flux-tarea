{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\SubGerenteInform\\\\Desktop\\\\maestriaII\\\\Nueva carpeta\\\\react-flux\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { handleResponse, handleError } from \"./apiUtils\";\nconst baseUrl = process.env.REACT_APP_API_URL + \"/courses/\";\nexport function getCourses() {\n  return fetch(baseUrl).then(handleResponse).catch(handleError);\n}\nexport function getCourseBySlug(slug) {\n  return fetch(baseUrl + \"?slug=\" + slug).then(response => {\n    if (!response.ok) throw new Error(\"Network response was not ok.\");\n    return response.json().then(courses => {\n      if (courses.length !== 1) throw new Error(\"Course not found: \" + slug);\n      return courses[0]; // should only find one course for a given slug, so return it.\n    });\n  }).catch(handleError);\n}\nexport function saveCourse(course) {\n  return fetch(baseUrl + (course.id || \"\"), {\n    method: course.id ? \"PUT\" : \"POST\",\n    // POST for create, PUT to update when id already exists.\n    headers: {\n      \"content-type\": \"application/json\"\n    },\n    body: JSON.stringify(_objectSpread({}, course, {\n      // Parse professorId to a number (in case it was sent as a string).\n      professorId: parseInt(course.professorId, 10)\n    }))\n  }).then(handleResponse).catch(handleError);\n}\nexport function deleteCourse(courseId) {\n  return fetch(baseUrl + courseId, {\n    method: \"DELETE\"\n  }).then(handleResponse).catch(handleError);\n}\nexport function getProfessors() {\n  return fetch(baseUrl).then(handleResponse).catch(handleError);\n}","map":{"version":3,"sources":["C:\\Users\\SubGerenteInform\\Desktop\\maestriaII\\Nueva carpeta\\react-flux\\src\\api\\courseApi.js"],"names":["handleResponse","handleError","baseUrl","process","env","REACT_APP_API_URL","getCourses","fetch","then","catch","getCourseBySlug","slug","response","ok","Error","json","courses","length","saveCourse","course","id","method","headers","body","JSON","stringify","professorId","parseInt","deleteCourse","courseId","getProfessors"],"mappings":";;;;;;AAAA,SAASA,cAAT,EAAyBC,WAAzB,QAA4C,YAA5C;AACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,iBAAZ,GAAgC,WAAhD;AAEA,OAAO,SAASC,UAAT,GAAsB;AAC3B,SAAOC,KAAK,CAACL,OAAD,CAAL,CACJM,IADI,CACCR,cADD,EAEJS,KAFI,CAEER,WAFF,CAAP;AAGD;AAED,OAAO,SAASS,eAAT,CAAyBC,IAAzB,EAA+B;AACpC,SAAOJ,KAAK,CAACL,OAAO,GAAG,QAAV,GAAqBS,IAAtB,CAAL,CACJH,IADI,CACCI,QAAQ,IAAI;AAChB,QAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB,MAAM,IAAIC,KAAJ,CAAU,8BAAV,CAAN;AAClB,WAAOF,QAAQ,CAACG,IAAT,GAAgBP,IAAhB,CAAqBQ,OAAO,IAAI;AACrC,UAAIA,OAAO,CAACC,MAAR,KAAmB,CAAvB,EAA0B,MAAM,IAAIH,KAAJ,CAAU,uBAAuBH,IAAjC,CAAN;AAC1B,aAAOK,OAAO,CAAC,CAAD,CAAd,CAFqC,CAElB;AACpB,KAHM,CAAP;AAID,GAPI,EAQJP,KARI,CAQER,WARF,CAAP;AASD;AAED,OAAO,SAASiB,UAAT,CAAoBC,MAApB,EAA4B;AACjC,SAAOZ,KAAK,CAACL,OAAO,IAAIiB,MAAM,CAACC,EAAP,IAAa,EAAjB,CAAR,EAA8B;AACxCC,IAAAA,MAAM,EAAEF,MAAM,CAACC,EAAP,GAAY,KAAZ,GAAoB,MADY;AACJ;AACpCE,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAF+B;AAGxCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,mBACDN,MADC;AAEJ;AACAO,MAAAA,WAAW,EAAEC,QAAQ,CAACR,MAAM,CAACO,WAAR,EAAqB,EAArB;AAHjB;AAHkC,GAA9B,CAAL,CASJlB,IATI,CASCR,cATD,EAUJS,KAVI,CAUER,WAVF,CAAP;AAWD;AAED,OAAO,SAAS2B,YAAT,CAAsBC,QAAtB,EAAgC;AACrC,SAAOtB,KAAK,CAACL,OAAO,GAAG2B,QAAX,EAAqB;AAAER,IAAAA,MAAM,EAAE;AAAV,GAArB,CAAL,CACJb,IADI,CACCR,cADD,EAEJS,KAFI,CAEER,WAFF,CAAP;AAGD;AAED,OAAO,SAAS6B,aAAT,GAAyB;AAC9B,SAAOvB,KAAK,CAACL,OAAD,CAAL,CACJM,IADI,CACCR,cADD,EAEJS,KAFI,CAEER,WAFF,CAAP;AAGD","sourcesContent":["import { handleResponse, handleError } from \"./apiUtils\";\r\nconst baseUrl = process.env.REACT_APP_API_URL + \"/courses/\";\r\n\r\nexport function getCourses() {\r\n  return fetch(baseUrl)\r\n    .then(handleResponse)\r\n    .catch(handleError);\r\n}\r\n\r\nexport function getCourseBySlug(slug) {\r\n  return fetch(baseUrl + \"?slug=\" + slug)\r\n    .then(response => {\r\n      if (!response.ok) throw new Error(\"Network response was not ok.\");\r\n      return response.json().then(courses => {\r\n        if (courses.length !== 1) throw new Error(\"Course not found: \" + slug);\r\n        return courses[0]; // should only find one course for a given slug, so return it.\r\n      });\r\n    })\r\n    .catch(handleError);\r\n}\r\n\r\nexport function saveCourse(course) {\r\n  return fetch(baseUrl + (course.id || \"\"), {\r\n    method: course.id ? \"PUT\" : \"POST\", // POST for create, PUT to update when id already exists.\r\n    headers: { \"content-type\": \"application/json\" },\r\n    body: JSON.stringify({\r\n      ...course,\r\n      // Parse professorId to a number (in case it was sent as a string).\r\n      professorId: parseInt(course.professorId, 10)\r\n    })\r\n  })\r\n    .then(handleResponse)\r\n    .catch(handleError);\r\n}\r\n\r\nexport function deleteCourse(courseId) {\r\n  return fetch(baseUrl + courseId, { method: \"DELETE\" })\r\n    .then(handleResponse)\r\n    .catch(handleError);\r\n}\r\n\r\nexport function getProfessors() {\r\n  return fetch(baseUrl)\r\n    .then(handleResponse)\r\n    .catch(handleError);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}